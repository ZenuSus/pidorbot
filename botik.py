# –≥–æ–≤–Ω–æ–∫–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω –∑–µ–Ω—É—Å–æ–º (https://zenusus.github.io/). 
# –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ –∫–æ–¥–∞ –≤ –º–µ—Å—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ª–µ–≥–∫–æ –º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å –∫–∞–∂–¥—ã–π
# –µ—Å–ª–∏ –≤—ã –±–µ—Ä–µ—Ç–µ –∫—É—Å–æ–∫ –∫–æ–¥–∞, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –µ–≥–æ –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º.
# –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–∏—à—å –∫–æ–¥, —Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é - –æ–Ω –Ω–∞—Å—Ç–æ–ª—å–∫–æ –ø–ª–æ—Ö–æ–π, —á—Ç–æ —è —Å–∞–º –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç.

import telebot
import random
import time
import logging
from threading import Lock
import sqlite3
from telebot import types
import os
import requests
import tempfile
import speech_recognition as sr
from pydub import AudioSegment
from io import BytesIO

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
)

# –¢–æ–∫–µ–Ω –Ω–∞—Ö
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'token')
ADMIN_ID = 5544581571  # –∞–π–¥–∏—à–Ω–∏–∫ –∞–¥–º–∏–Ω–∞ –±–æ—Ç–∞ (–æ–Ω –∫–∞—Ä–æ—á –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–∞–Ω–∞–º–∏, –±–∞–∑–æ–π –∏—Ç–¥)
MAX_VOICE_DURATION = 60  # –¥–ª–∏–Ω–∞ –≥—Å–∫–∏, —Å–¥–µ–ª–∞–ª –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —á—Ç–æ–± –±—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –ø–æ–º–µ–Ω—è—Ç—å –µ—Å–ª–∏ —á–µ

# –∞–ø–∏ thecatapi.com (–º–æ–∂–µ—à—å –≤–∞—â–µ –Ω–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å, –æ–Ω–æ –∏ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ö–æ—Ç—è –µ—Å–ª–∏ —Å–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞ —Ç–æ–∫–µ–Ω –∫–æ–¥ –æ—Ç–≤–∞–ª–∏—Ç—Å—è)
CAT_API_KEY = 'YOUR_CATAPI_KEY'

bot = telebot.TeleBot(TOKEN)

# —á–µ—Ç —Å –±–¥—à–∫–æ–π —á—Ç–æ–± —Ä–∞–±–æ—Ç–∞–ª–æ
db_lock = Lock()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
def get_db_connection():
    conn = sqlite3.connect('users.db', check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                first_name TEXT,
                username TEXT,
                score INTEGER DEFAULT 0,
                coins INTEGER DEFAULT 0,
                last_used_get INTEGER DEFAULT 0,
                last_used_booster INTEGER DEFAULT 0
            )
            ''')
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS chats (
                chat_id INTEGER PRIMARY KEY,
                chat_type TEXT
            )
            ''')
            conn.commit()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ø–æ–∏—Å–∫ –ø–æ —é–∑—É –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–º–∞–Ω–¥
def get_user_by_username(username):
    try:
        with db_lock:
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM users WHERE username = ?', (username,))
                return cursor.fetchone()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫ –Ω–∞—Ö: {e}")
        return None

# —Å–æ–∑–¥–∞–Ω–∏–µ —é–∑–µ—Ä–∞ –∏—Ç–ø
def get_or_create_user(user_id, first_name, username):
    try:
        with db_lock:
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
                user = cursor.fetchone()
                if not user:
                    cursor.execute('INSERT INTO users (user_id, first_name, username) VALUES (?, ?, ?)', (user_id, first_name, username))
                    conn.commit()
                return user
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —é–∑–µ—Ä–∞ –Ω–∞—Ö {e}")
        return None

# –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∏—Ö—É—è
def update_user_coins(user_id, coins):
    try:
        with db_lock:
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE users SET coins = coins + ? WHERE user_id = ?', (coins, user_id))
                conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")

def update_user_score(user_id, points):
    try:
        with db_lock:
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE users SET score = score + ? WHERE user_id = ?', (points, user_id))
                conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")

# –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—É–µ–≤
def update_last_used_get(user_id):
    try:
        with db_lock:
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE users SET last_used_get = ? WHERE user_id = ?', (int(time.time()), user_id))
                conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–µ—Ç: {e}")

# —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∏—Ö—É—è, —É–±–∏—Ä–∞—Ç—å –ª–µ–Ω—å
def update_last_used_booster(user_id):
    try:
        with db_lock:
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('UPDATE users SET last_used_booster = ? WHERE user_id = ?', (int(time.time()), user_id))
                conn.commit()
    except Exception as e:
        logging.error(f"–±–ª—è—è—è –æ—à–∏–±–∫–∞–∞–∞–∞: {e}")

# –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def get_user_data(user_id):
    try:
        with db_lock:
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT first_name, username, score, coins, last_used_get, last_used_booster FROM users WHERE user_id = ?', (user_id,))
                return cursor.fetchone()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# —Ö—É–∏
def get_user_score(user_id):
    try:
        with db_lock:
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT score FROM users WHERE user_id = ?', (user_id,))
                result = cursor.fetchone()
                return result['score'] if result else 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö—É–µ–≤ –Ω–∞—Ö: {e}")
        return 0

# –ª–∏–¥–µ—Ä–±–æ—Ä–¥
def get_leaderboard():
    try:
        with db_lock:
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT first_name, username, score FROM users ORDER BY score DESC LIMIT 10')
                return cursor.fetchall()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: {e}")
        return []


# /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    firstname = message.from_user.first_name
    bot.reply_to(message, f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {firstname}. –Ø –ø–∏–¥–æ—Ä–±–æ—Ç. </b> \n\n ‚ùî –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è –º–æ–≥—É. \n\n ü§ë –ö–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–∞: @zenusoff \n –ú–æ–π –∫–∞–Ω–∞–ª: @pidorbot_ch \n\n –°–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å–±–æ—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä, <a href='https://t.me/pidorbot_ch/74'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>", disable_web_page_preview=True, parse_mode='HTML')

# /help
@bot.message_handler(commands=['help'])
def send_(message):
    bot.reply_to(message, "‚ùî <b> –ü–æ–º–æ—â—å: </b> <a href='https://t.me/skibidi_pidor_bot/docs'>–Ω–∞–∂–º–∏</a> \n–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ –∫–æ–¥–µ? –ù–∞–ø–∏—à–∏ /libs", parse_mode='HTML')

    # /libs
@bot.message_handler(commands=['libs'])
def send_welcome(message):
    bot.reply_to(message, "‚úçÔ∏è <b> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: </b> \n\n <blockquote> telebot - –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n random - —Ä–∞–Ω–¥–æ–º –≤ –∫–æ–º–∞–Ω–¥–∞—Ö \n time - —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ \n logging - –ª–æ–≥–∏ \n sqlite - –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö \n os - —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ </blockquote>", parse_mode='HTML')

# /me
@bot.message_handler(commands=['me'])
def show_me(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    username = message.from_user.username

    # —Å–æ–∑–¥–∞–µ–º —é–∑–µ—Ä–∞ –∏–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ –±–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
    get_or_create_user(user_id, first_name, username)

    # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∫–∞ —Å–æ–æ
    user_data = get_user_data(user_id)
    if user_data:
        first_name, username, score, coins, _, _ = user_data
        me_message = f"üë§ <b> –ü—Ä–æ—Ñ–∏–ª—å: </b> \n\n"
        me_message += f"–ò–º—è: {first_name}\n"
        if username:
            me_message += f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
        me_message += f"–•—É–∏ –≤ –∂–æ–ø–µ: {score}\n"
        me_message += f"–ú–æ–Ω–µ—Ç—ã: {coins}"
    else:
        me_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."

    bot.reply_to(message, me_message, parse_mode='HTML')

# /getpenis
@bot.message_handler(commands=['getpenis'])
def get_points(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    username = message.from_user.username

    # –æ–ø—è—Ç—å —Å –±–¥ —Ö–µ—Ä—å –∞–ª–æ
    get_or_create_user(user_id, first_name, username)

    user_data = get_user_data(user_id)
    if user_data:
        last_used_get = user_data['last_used_get']
        current_time = int(time.time())

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ /get
        if current_time - last_used_get >= 2 * 5400:
            # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ö—É–µ–≤
            points = random.randint(3, 5)
            update_user_score(user_id, points)
            update_last_used_get(user_id)

            user_data = get_user_data(user_id)
            if user_data:
                score = user_data[2]
                chat_id = message.chat.id
                firstname = message.from_user.first_name
                bot.reply_to(message, f"üéâ –û—Ç–ª–∏—á–Ω–æ, {firstname}, —Ç—ã –ø–æ–ª—É—á–∏–ª {points} —Ö—É—ë–≤! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {score} —Ö—É—ë–≤.")
            else:
                bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            # –æ–ø—è—Ç—å –≤—Ä–µ–º—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏–∑–¥–µ—Ü –≥–æ–≤–Ω–æ–∫–æ–¥
            remaining_time = 2 * 5400 - (current_time - last_used_get)
            hours = remaining_time // 5400
            minutes = (remaining_time % 5400) // 60
            chat_id = message.chat.id
            firstname = message.from_user.first_name
            bot.reply_to(message, f"‚ùå –ú–Ω–µ –∂–∞–ª—å, {firstname}, –Ω–æ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ —Ö—É–µ–≤ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ –∏ {minutes} –º–∏–Ω—É—Ç.")
    else:
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

# /liderboard
@bot.message_handler(commands=['liderboard'])
def show_leaderboard(message):
    try:
        leaderboard = get_leaderboard()
        if leaderboard:
            leaderboard_message = "üèÜ <b>–õ–∏–¥–µ—Ä–±–æ—Ä–¥:</b>\n\n"
            for i, (first_name, username, score) in enumerate(leaderboard, start=1):
                leaderboard_message += f'{i}. <a href="t.me/{username}">{first_name}</a> ‚Äî {score} —Ö—É—ë–≤\n' 
        else:
            leaderboard_message = "‚ùå –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.reply_to(message, leaderboard_message, disable_web_page_preview=True, parse_mode='HTML')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /liderboard: {e}")
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: {e}")

# /cat
@bot.message_handler(commands=['cat'])
def send_cat(message):
    try:
        # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–∫–∏ –∫–æ—Ç–∞ (–ø–∑–¥—Ü –¥–æ–ª–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –µ–±–∞–Ω—ã–π –∞–ø–∏)
        if CAT_API_KEY:
            response = requests.get(f'https://api.thecatapi.com/v1/images/search?api_key={CAT_API_KEY}')
        else:
            response = requests.get('https://api.thecatapi.com/v1/images/search')
        
        if response.status_code == 200:
            cat_data = response.json()
            cat_url = cat_data[0]['url']
            
            
            bot.reply_to(message, "–ò—â—É –∫–æ—Ç–∞... \n ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å API, –∞ —Ç–∞–∫–∂–µ —Å–µ—Ä–≤–µ—Ä–æ–º.")
            time.sleep(1)
            chat_id = message.chat.id
            firstname = message.from_user.first_name
            bot.send_photo(message.chat.id, cat_url, caption=f"–î–µ—Ä–∂–∏ –∫–æ—Ç–∏–∫–∞, {firstname}. –ö–∞–∫ —Ç–µ–±–µ? üò∫")
        else:
            bot.reply_to(message, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ç–∏–∫–∞ üòø")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

        # /eblan
@bot.message_handler(commands=['eblan'])
def send_random_number(message):
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–±–ª–∞–Ω—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –æ—á —Å–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø—Ä—è–º –ø–∑–¥—Ü
    random_number = random.randint(1, 100)
    bot.reply_to(message, f"üßê –î—É–º–∞—é, —á—Ç–æ —Ç—ã –µ–±–ª–∞–Ω –Ω–∞ {random_number}%")

#  /play_game
@bot.message_handler(commands=['play_game'])
def play_game(message):
    try:
        # —Å—É–º–º–∞ –ø–∞–ª—É—á–∞—Ç
        args = message.text.split()
        if len(args) < 2:
            bot.reply_to(message, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /play_game [—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏]")
            return

        bet_amount = int(args[1])
        if bet_amount <= 0:
            bot.reply_to(message, "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return

        user_id = message.from_user.id
        user_score = get_user_score(user_id)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—â–µ–≥–æ –Ω–∞—Ö—É–π
        if user_score < bet_amount:
            bot.reply_to(message, "‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö—É—ë–≤ –¥–ª—è —Å—Ç–æ–ª—å –±–æ–ª—å—à–æ–π —Å—Ç–∞–≤–∫–∏. –ü–æ–¥–∑–∞—Ä–∞–±–æ—Ç–∞–π, –∏ –≤–æ–∑—Ä–∞—â–∞–π—Å—è –ø–æ–∑–∂–µ.")
            return

        # –∏–ª–ª—é–∑–∏—è –≤—ã–±–æ—Ä–∞
        markup = types.InlineKeyboardMarkup()
        dart_button = types.InlineKeyboardButton("üéØ –î–∞—Ä—Ç—Å", callback_data=f"dart_{bet_amount}")
        casino_button = types.InlineKeyboardButton("üé∞ –ö–∞–∑–∏–Ω–æ", callback_data=f"casino_{bet_amount}")
        markup.add(dart_button, casino_button)

        bot.reply_to(message, "üïπÔ∏è –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", reply_markup=markup)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        user_id = call.from_user.id
        data = call.data.split('_')
        game_type = data[0]
        bet_amount = int(data[1])

        user_score = get_user_score(user_id)

        if game_type == "dart":
            # –¥–∞—Ä—Ç—Å
            if random.random() < 0.1:  # –∞–∂ 10% —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É –Ω—É –∫–æ—Ä–æ—á –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å
                win_amount = int(bet_amount * 1.2)
                update_user_score(user_id, win_amount)
                bot.answer_callback_query(call.id, f"üéâ –¢—ã –∑–∞–ø—É—Å—Ç–∏–ª —Å—Ç—Ä–µ–ª—É, –∏ –≤—ã–∏–≥—Ä–∞–ª {win_amount} —Ö—É—ë–≤. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!")
            else:
                update_user_score(user_id, -bet_amount)
                bot.answer_callback_query(call.id, "üò≠ –°—Ç—Ä–µ–ª–∞ –Ω–µ –ø–æ–ø–∞–ª–∞. –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. –ú—ã –∑–∞–±—Ä–∞–ª–∏ —Ç–≤–æ—é —Å—Ç–∞–≤–∫—É —Å–µ–±–µ.")

        elif game_type == "casino":
            # –∫–∞–∑–∏–Ω–æ 1 –∏–∫—Å –±–µ—Ç
            if random.random() < 0.1:  # 5% —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É (–Ω—É –∞ —Ö—É–ª–∏ –Ω–µ—Ç)
                win_amount = int(bet_amount * 1.2)
                update_user_score(user_id, win_amount)
                bot.answer_callback_query(call.id, f"üéâ –¢—ã –∫—Ä—É—Ç–∞–Ω—É–ª –∫–∞–∑–∏–∫, –∏ —Ç—ã–∏–≥—Ä–∞–ª {win_amount} —Ö—É—ë–≤. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!")
            else:
                update_user_score(user_id, -bet_amount)
                bot.answer_callback_query(call.id, "üò≠ –ö–∞–∑–∏–∫ –Ω–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. –ú—ã –∑–∞–±—Ä–∞–ª–∏ —Ç–≤–æ—é —Å—Ç–∞–≤–∫—É —Å–µ–±–µ.")

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    except Exception as e:
        bot.answer_callback_query(call.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

        # –∏–Ω–ª–∞–π–Ω –Ω–∞—Ö
@bot.inline_handler(func=lambda query: True)
def handle_inline_query(inline_query):
    try:
        r = types.InlineQueryResultArticle(
            id='1',
            title='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º–∫–æ',
            input_message_content=types.InputTextMessageContent(
                message_text='@skibidi_pidor_bot –ø–æ–ª—É—á–∞–π —Ö—É–∏ –≤ –∂–æ–ø—É —É–∂–µ —Å–µ–≥–æ–¥–Ω—è.'
            ),
            thumbnail_url='https://zenusus.github.io/images/riba.jpg',
            description='—ã—à–≤–∞–≥—à–≤—Ñ—Ü–≥–∑–∞–∞—ã—â—É–ø–Ω—ã—â—ã–ø–æ–≥—ã—É–∞–ø–≤–∫',
            )
        
        bot.answer_inline_query(inline_query.id, [r])
    except Exception as e:
        print(e)

# –∑–∞–±—ã–ª —á—Ç–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —É–∂–µ
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    if call.data == 'send_message':
        bot.send_message(chat_id=call.message.chat.id, text='@skibidi_pidor_bot –ª—É—á—à–∏–π –±–æ—Ç–µ–∫ (—è–ø–∏–¥–æ—Ä)')

@bot.message_handler(commands=['send_penis'])
def send_penis_points(message):
    try:
        args = message.text.split()
        
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–±–æ–µ—é –ª–∏ —é–∑–µ—Ä –∏ –Ω–µ —É–∫–∞–∑–∞–ª —Ö—É–π–Ω—é
        if len(args) < 3:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /send_penis @username [—Å—É–º–º–∞]")
            return

        # –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Ö—É–π
        recipient_username = args[1].replace('@', '')
        try:
            amount = int(args[2])
        except ValueError:
            bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        if amount <= 0:
            bot.reply_to(message, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return

        sender_id = message.from_user.id
        sender_data = get_user_data(sender_id)
        if not sender_data:
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
            return

        if sender_data['score'] < amount:
            bot.reply_to(message, "‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö—É–µ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            return

        recipient_data = get_user_by_username(recipient_username)
        if not recipient_data:
            bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{recipient_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ –µ–±–ª–∞–Ω –ª–∏ —é–∑–µ—Ä
        markup = types.InlineKeyboardMarkup()
        confirm_button = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"confirm_send_penis_{amount}_{recipient_data['user_id']}")
        markup.add(confirm_button)

        bot.reply_to(message, f"üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ {amount} —Ö—É–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{recipient_username}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /send_penis: {e}")
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ò–¥–∏ –Ω–∞—Ö—É–π.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_send_penis_'))
def handle_confirm_send_penis(call):
    try:
        data = call.data.split('_')
        amount = int(data[2])
        recipient_id = int(data[3])

        sender_id = call.from_user.id
        sender_data = get_user_data(sender_id)
        if not sender_data:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
            return

        if sender_data['score'] < amount:
            bot.answer_callback_query(call.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            return

        recipient_data = get_user_data(recipient_id)
        if not recipient_data:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
            return

        # –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ
        update_user_score(sender_id, -amount) 
        update_user_score(recipient_id, amount)

        bot.answer_callback_query(call.id, f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ {amount} –æ—á–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

        # —É–≤–µ–¥–æ–≤–ª–µ–Ω–∏–µ –µ–±–ª–∞–Ω—É
        bot.send_message(recipient_id, f"üéâ –í–∞–º –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} –æ—á–∫–æ–≤ –æ—Ç @{sender_data['username']}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ.")


# –ê —ç—Ç–∞ –±–∞–Ω—ã))
def add_to_blacklist(user_id, username, first_name, last_name, reason):
    conn = sqlite3.connect('banned_users.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT OR REPLACE INTO banned_users (user_id, username, first_name, last_name, reason)
    VALUES (?, ?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name, reason))
    
    conn.commit()
    conn.close()

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ–±–ª–∞–Ω–∞
def is_user_banned(user_id):
    conn = sqlite3.connect('banned_users.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM banned_users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    conn.close()
    return user

# —É–¥–∞–ª–µ–Ω–∏–µ –µ–±–ª–∞–Ω–∞
def remove_from_blacklist(user_id):
    conn = sqlite3.connect('banned_users.db')
    cursor = conn.cursor()
    
    cursor.execute('DELETE FROM banned_users WHERE user_id = ?', (user_id,))
    
    conn.commit()
    conn.close()

@bot.message_handler(content_types=['new_chat_members'])
def handle_new_member(message):
    for member in message.new_chat_members:
        banned_user = is_user_banned(member.id)
        if banned_user:
            try:
                # –ø–æ–ø—ã—Ç–∫–∞ –±–∞–Ω–∞ –µ–±–ª–∞–Ω–∞
                bot.ban_chat_member(
                    chat_id=message.chat.id,
                    user_id=member.id
                )
                
                # –µ–±–∞–∞–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞
                reason = banned_user[4] or "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                ban_message = (
                    f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.first_name} (@{member.username}) "
                    f"–±—ã–ª –∑–∞–±–∞–Ω–µ–Ω, —Ç.–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–µ –±–æ—Ç–∞.\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞: {reason}\n"
                    f"ID —é–∑–µ—Ä–∞: {member.id}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                msg = bot.send_message(message.chat.id, ban_message)
                
            except Exception as e:
                error_msg = (
                    f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –±–∞–∑–µ –ø–∏–¥–∞—Ä–∞—Å–∏–∫–æ–≤. –ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å {member.first_name}.\n"
                    f"–û—à–∏–±–∫–∞: {str(e)} \n\n –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –±–∞–Ω–∞ :("
                )
                bot.send_message(message.chat.id, error_msg)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                bot.send_message(ADMIN_ID, error_msg + f"\n–ß–∞—Ç: {message.chat.title}")

@bot.message_handler(commands=['addban'])
def add_ban(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–ü–æ–µ—à—å –≥–æ–≤–Ω–∞ –≥–∞–Ω–¥–æ–Ω")
        return
    
    try:
        args = message.text.split(' ', 2)
        if len(args) < 3:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π: /addban user_id –ø—Ä–∏—á–∏–Ω–∞")
            return
            
        user_id = int(args[1])
        reason = args[2]
        
        try:
            # –ø–∞–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ–æ
            user_info = bot.get_chat(user_id)
        except telebot.apihelper.ApiTelegramException as e:
            if "chat not found" in str(e):
                # —Å–∞—Å–∞–ª
                add_to_blacklist(
                    user_id=user_id,
                    username="unknown",
                    first_name="Unknown",
                    last_name="",
                    reason=reason
                )
                bot.reply_to(message, f"–Æ–∑–µ—Ä —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ eblan-–±–∞–∑—É. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ–Ω –±–ª–æ–∫–Ω—É–ª –±–æ—Ç–∞ –µ–≥–æ –Ω–µ—Ç—É –≤ –±–¥, –∏—Ç–¥).")
                return
            else:
                raise
        
        # —Å–∞—Å–∞–ª –¥–∞
        add_to_blacklist(
            user_id=user_id,
            username=user_info.username or "unknown",
            first_name=user_info.first_name or "Unknown",
            last_name=user_info.last_name or "",
            reason=reason
        )
        
        bot.reply_to(message, f"–Æ–∑–µ—Ä {user_info.first_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ eblan-–±–∞–∑—É.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['checkban'])
def check_ban(message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
    else:
        try:
            user_id = int(message.text.split()[1])
        except:
            bot.reply_to(message, "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ —É–∫–∞–∂–∏ ID")
            return
    
    user = is_user_banned(user_id)
    if user:
        bot.reply_to(message, f"‚úÖ –Æ–∑–µ—Ä {user_id} –≤ –±–∞–∑–µ. \n–ü—Ä–∏—á–∏–Ω–∞: {user[4]}")
    else:
        bot.reply_to(message, f"‚ùå –Æ–∑–µ—Ä {user_id} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ eblan-–±–∞–∑–µ. \n –î–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —é–∑–µ—Ä–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —á–∞—Ç –±–æ—Ç–∞")


@bot.message_handler(commands=['removeban'])
def remove_ban(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–≥–æ–≤–Ω–æ–µ–¥ –∏–¥–∏ –Ω–∞—Ö—É–π")
        return
    
    try:
        # –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /removeban user_id
        args = message.text.split(' ', 1)
        if len(args) < 2:
            bot.reply_to(message, "–Æ–∑–∞–π: /removeban user_id, –µ–±–ª–∞–Ω")
            return
            
        user_id = int(args[1])
        remove_from_blacklist(user_id)
        bot.reply_to(message, f"–Æ–∑–µ—Ä {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î –µ–±–ª–∞–Ω–æ–≤.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['listbanned'])
def list_banned(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–≤–∞–π —Å—ã–Ω—à–∞ –ª–∞–≤—ã")
        return
    
    conn = sqlite3.connect('banned_users.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM banned_users')
    banned_users = cursor.fetchall()
    
    conn.close()
    
    if not banned_users:
        bot.reply_to(message, "–í –±–∞–∑–µ –ø—É—Å—Ç–æ.")
        return
    
    response = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ –µ–±–ª–∞–Ω–æ–≤:\n\n"
    for user in banned_users:
        response += f"ID: {user[0]}, –ò–º—è: {user[2]} {user[3]}, @{user[1]}, –ü—Ä–∏—á–∏–Ω–∞: {user[4]}\n"
    
    bot.reply_to(message, response)


# —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥—Å
def convert_ogg_to_wav(ogg_audio):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç WAV –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    audio = AudioSegment.from_ogg(BytesIO(ogg_audio))
    wav_audio = BytesIO()
    audio.export(wav_audio, format='wav')
    wav_audio.seek(0)
    return wav_audio

def transcribe_locally(audio_file_path):
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –ª–æ–∫–∞–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é SpeechRecognition"""
    recognizer = sr.Recognizer()
    
    with sr.AudioFile(audio_file_path) as source:
        audio_data = recognizer.record(source)
        try:
            text = recognizer.recognize_google(audio_data, language='ru-RU')
            return text
        except sr.UnknownValueError:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
        except sr.RequestError as e:
            return f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}"

@bot.message_handler(commands=['voice'])
def handle_voice_command(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /voice –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if not message.reply_to_message or not message.reply_to_message.voice:
        bot.reply_to(message, "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—É /voice –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ")
        return
    
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≥—Å
    if message.reply_to_message.voice.duration > MAX_VOICE_DURATION:
        bot.reply_to(message, f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {MAX_VOICE_DURATION} —Å–µ–∫—É–Ω–¥.")
        return
    
    try:
        processing_msg = bot.reply_to(message.reply_to_message, "‚è≥ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞...")
        
        file_info = bot.get_file(message.reply_to_message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as tmp_ogg:
            tmp_ogg.write(downloaded_file)
            tmp_ogg_path = tmp_ogg.name
        
        wav_audio = convert_ogg_to_wav(downloaded_file)
        
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp_wav:
            tmp_wav.write(wav_audio.getvalue())
            tmp_wav_path = tmp_wav.name
        
        # —Å–∞–º–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
        text = transcribe_locally(tmp_wav_path)
        
        # —É–¥–∞–ª–µ–Ω–∏–µ –≥—Å –∏–∑ —Ñ–∞–π–ª–æ–≤
        try:
            os.unlink(tmp_ogg_path)
            os.unlink(tmp_wav_path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
        
        bot.edit_message_text(
            chat_id=processing_msg.chat.id,
            message_id=processing_msg.message_id,
            text=f"üîä –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞: {text}"
        )
        
    except Exception as e:
        if 'tmp_ogg_path' in locals() and os.path.exists(tmp_ogg_path):
            os.unlink(tmp_ogg_path)
        if 'tmp_wav_path' in locals() and os.path.exists(tmp_wav_path):
            os.unlink(tmp_wav_path)
        
        bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")


# —ã
init_db()

# –ó–∞–ø—É—Å–∫ –Ω–∞—Ö
if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.") 
    try:
        bot.polling(none_stop=True, timeout=60)
        updater.idle()
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}") 